const express = require('express')
const cors = require('cors')
const mongoose = require('mongoose') 
const user = require('./routes/user')
const auth = require('./routes/auth')
const product = require('./routes/product')
const ticket = require('./routes/ticket')
const farmer = require('./routes/farmer')
const multer = require('multer')
const {GridFsStorage} = require('multer-gridfs-storage')
const Grid = require('gridfs-stream')
const path = require('path')

const dotenv = require('dotenv');


dotenv.config()

const app = express()

//Connect DB
const CONNECTION_URL = `${process.env.DATABASE_URL}`
const PORT = 5000;

app.use(cors())
app.use(express.json({limit: '50mb'}))

app.use(function(req, res, next){
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
})

app.get('/', (req,res) => res.send("API Running"))

app.use('/user', user)
app.use('/auth', auth)
app.use('/product', product)
app.use('/ticket', ticket)
app.use('/farmer', farmer)

const conn = mongoose.createConnection(CONNECTION_URL, {
    useNewUrlParser: true, 
    useUnifiedTopology:true
})

let gfs
conn.once('open', () => {
    gfs = new mongoose.mongo.GridFSBucket(conn.db, {
        bucketName: "uploads"
    });
});



const storage = new GridFsStorage({
    url: CONNECTION_URL,
    file:(req, file) => {
        return new Promise((resolve, reject) => {
            crypto.randomBytes(16, (err, buf) => {
                if(err){
                    return reject(err)
                }
                const filename = buf.toString('hex') + path.extname(file.originalname)
                const fileInfo = {
                    filename: filename,
                    bucketName: 'uploads'
                };
                resolve(fileInfo)
            })
        })
    }
})

const upload = multer({storage})


app.post('/upload', upload.array('fileCollection', 10), (req, res) => {
    console.log(req.files)
    res.json({success: true, data:req.files})
})

app.get('/download/:id', async (req, res) => {

    // gfs.findOne({ _id: req.params.id}, function(err, file) {
    //   if (err) {
    //     common.handleError(err, res);
    //     return;
    //   }
  
    //   if (!file) {
    //     return res.json({ status: constants._ERROR, body: { message: constants._FILE_NOT_FOUND }});
    //   }
  
    //   res.set('Content-Type', file.contentType);
    //   res.set('Content-Disposition', 'attachment; filename="' + file.filename + '"');
  
    //   //console.log(file);
    //   var readstream = gfs.createReadStream({
    //     _id: file._id
    //   });
  
    //   readstream.on('error', function (err) {
    //     console.error('Read error', err);
    //     res.end();
    //   });
  
    //   readstream.pipe(res);
    // });
    if(!gfs){
        console.log('some error with connection')
        return res.send('error with gfs')
    }

    let file = gfs.find({ _id: req.params.id }).toArray((err, files) => {
        if (!file || file.length === 0) {
            return res.status(404).json({
            err: 'No file exists'
            });
        }

        // gfs.openDownloadStreamByName()
        gfs.openDownloadStream(req.params.id).pipe(res)
    })
        // Check if file
    
    // File exists
    return res.json(file);

  });

app.listen(process.env.PORT || PORT, () => console.log(`Server running on port ${PORT}`))